plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'pmd'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
}

pmd {
    ruleSets = []
    ruleSetFiles rootProject.file("myRuleset.xml")
}


task idlToJava(type: IdlToJava) {
    idlFiles = project.files(
            "${projectDir}/src/idl/Test1.idl",
            "${projectDir}/src/idl/Test2.idl")

    includes = ["ONE", "TWO"]
    jacorbClasspath = files("/path/to/jacorb.jar")

    outputDirectory = file("${buildDir}/idl/java")
}

public class IdlToJava extends DefaultTask {
    @InputFiles
    FileCollection idlFiles

    @Classpath
    FileCollection jacorbClasspath

    // We currently only consider the include _paths_ for cache key.
    // This means that a change to a file within an include directory won't invalidate the cache.
    // We should really be inspecting the contents of these dirs and invalidating cache if anything changes
    // but this could be quite expensive, depending on how many files are in each
    @Input
    List<String> includes

    @OutputDirectory
    File outputDirectory

    IdlToJava() {
        description = 'Create .java files from selected IDL files'
    }

    @TaskAction
    void processIdl() {
        // Create batches to send to the JacORB compiler
        int count = 0
        FileCollection batch = project.files()
        idlFiles.each { File idlFile->
            count++
            batch += project.files(idlFile)
            if (count == 7) {
                compileBatch(batch)
                count = 0
                batch = project.files()
            }
        }
        if (count > 0) {
            compileBatch(batch)
        }
    }
    private void compileBatch(def idlFiles) {
        println idlFiles.collect {it.path}
        return

        // Compile IDL to Java using JacORB compiler
        project.javaexec {
            main = 'org.jacorb.idl.parser'
            classpath = jacorbClasspath
            args '-DNBU_USES_JACORB_FOR_COMPILATION'
            includes.each { include ->
                args "-I${include}"
            }
            args '-d',"${outputDirectory}"
            args '-sloppy_forward'
            idlFiles.each {
                File idlFile ->
                    args "${idlFile}"
            }
        }
    }
}
